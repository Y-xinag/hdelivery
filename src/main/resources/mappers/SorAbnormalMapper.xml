<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.logistics.dao.SorAbnormalMapper" >
  <resultMap id="BaseResultMap" type="com.example.logistics.model.SorAbnormal" >
    <id column="ID" property="id" jdbcType="INTEGER" />
    <result column="LaunchDate" property="launchdate" jdbcType="TIMESTAMP" />
    <result column="LaunchPerson" property="launchperson" jdbcType="VARCHAR" />
    <result column="LaunchCompany" property="launchcompany" jdbcType="VARCHAR" />
    <result column="AbnormalType" property="abnormaltype" jdbcType="BIT" />
    <result column="TransferInt" property="transferint" jdbcType="VARCHAR" />
    <result column="CargoInt" property="cargoint" jdbcType="VARCHAR" />
    <result column="PackageInt" property="packageint" jdbcType="VARCHAR" />
    <result column="HedgeAbnInt" property="hedgeabnint" jdbcType="INTEGER" />
    <result column="AboState" property="abostate" jdbcType="BIT" />
    <result column="HandleDate" property="handledate" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    ID, LaunchDate, LaunchPerson, LaunchCompany, AbnormalType, TransferInt, CargoInt, 
    PackageInt, HedgeAbnInt, AboState, HandleDate
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.example.logistics.model.SorAbnormalExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from sor_abnormal
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from sor_abnormal
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from sor_abnormal
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.logistics.model.SorAbnormalExample" >
    delete from sor_abnormal
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.logistics.model.SorAbnormal" >
    insert into sor_abnormal (ID, LaunchDate, LaunchPerson, 
      LaunchCompany, AbnormalType, TransferInt, 
      CargoInt, PackageInt, HedgeAbnInt, 
      AboState, HandleDate)
    values (#{id,jdbcType=INTEGER}, #{launchdate,jdbcType=TIMESTAMP}, #{launchperson,jdbcType=VARCHAR}, 
      #{launchcompany,jdbcType=VARCHAR}, #{abnormaltype,jdbcType=BIT}, #{transferint,jdbcType=VARCHAR}, 
      #{cargoint,jdbcType=VARCHAR}, #{packageint,jdbcType=VARCHAR}, #{hedgeabnint,jdbcType=INTEGER}, 
      #{abostate,jdbcType=BIT}, #{handledate,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.example.logistics.model.SorAbnormal" >
    insert into sor_abnormal
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        ID,
      </if>
      <if test="launchdate != null" >
        LaunchDate,
      </if>
      <if test="launchperson != null" >
        LaunchPerson,
      </if>
      <if test="launchcompany != null" >
        LaunchCompany,
      </if>
      <if test="abnormaltype != null" >
        AbnormalType,
      </if>
      <if test="transferint != null" >
        TransferInt,
      </if>
      <if test="cargoint != null" >
        CargoInt,
      </if>
      <if test="packageint != null" >
        PackageInt,
      </if>
      <if test="hedgeabnint != null" >
        HedgeAbnInt,
      </if>
      <if test="abostate != null" >
        AboState,
      </if>
      <if test="handledate != null" >
        HandleDate,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="launchdate != null" >
        #{launchdate,jdbcType=TIMESTAMP},
      </if>
      <if test="launchperson != null" >
        #{launchperson,jdbcType=VARCHAR},
      </if>
      <if test="launchcompany != null" >
        #{launchcompany,jdbcType=VARCHAR},
      </if>
      <if test="abnormaltype != null" >
        #{abnormaltype,jdbcType=BIT},
      </if>
      <if test="transferint != null" >
        #{transferint,jdbcType=VARCHAR},
      </if>
      <if test="cargoint != null" >
        #{cargoint,jdbcType=VARCHAR},
      </if>
      <if test="packageint != null" >
        #{packageint,jdbcType=VARCHAR},
      </if>
      <if test="hedgeabnint != null" >
        #{hedgeabnint,jdbcType=INTEGER},
      </if>
      <if test="abostate != null" >
        #{abostate,jdbcType=BIT},
      </if>
      <if test="handledate != null" >
        #{handledate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.logistics.model.SorAbnormalExample" resultType="java.lang.Integer" >
    select count(*) from sor_abnormal
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update sor_abnormal
    <set >
      <if test="record.id != null" >
        ID = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.launchdate != null" >
        LaunchDate = #{record.launchdate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.launchperson != null" >
        LaunchPerson = #{record.launchperson,jdbcType=VARCHAR},
      </if>
      <if test="record.launchcompany != null" >
        LaunchCompany = #{record.launchcompany,jdbcType=VARCHAR},
      </if>
      <if test="record.abnormaltype != null" >
        AbnormalType = #{record.abnormaltype,jdbcType=BIT},
      </if>
      <if test="record.transferint != null" >
        TransferInt = #{record.transferint,jdbcType=VARCHAR},
      </if>
      <if test="record.cargoint != null" >
        CargoInt = #{record.cargoint,jdbcType=VARCHAR},
      </if>
      <if test="record.packageint != null" >
        PackageInt = #{record.packageint,jdbcType=VARCHAR},
      </if>
      <if test="record.hedgeabnint != null" >
        HedgeAbnInt = #{record.hedgeabnint,jdbcType=INTEGER},
      </if>
      <if test="record.abostate != null" >
        AboState = #{record.abostate,jdbcType=BIT},
      </if>
      <if test="record.handledate != null" >
        HandleDate = #{record.handledate,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update sor_abnormal
    set ID = #{record.id,jdbcType=INTEGER},
      LaunchDate = #{record.launchdate,jdbcType=TIMESTAMP},
      LaunchPerson = #{record.launchperson,jdbcType=VARCHAR},
      LaunchCompany = #{record.launchcompany,jdbcType=VARCHAR},
      AbnormalType = #{record.abnormaltype,jdbcType=BIT},
      TransferInt = #{record.transferint,jdbcType=VARCHAR},
      CargoInt = #{record.cargoint,jdbcType=VARCHAR},
      PackageInt = #{record.packageint,jdbcType=VARCHAR},
      HedgeAbnInt = #{record.hedgeabnint,jdbcType=INTEGER},
      AboState = #{record.abostate,jdbcType=BIT},
      HandleDate = #{record.handledate,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.logistics.model.SorAbnormal" >
    update sor_abnormal
    <set >
      <if test="launchdate != null" >
        LaunchDate = #{launchdate,jdbcType=TIMESTAMP},
      </if>
      <if test="launchperson != null" >
        LaunchPerson = #{launchperson,jdbcType=VARCHAR},
      </if>
      <if test="launchcompany != null" >
        LaunchCompany = #{launchcompany,jdbcType=VARCHAR},
      </if>
      <if test="abnormaltype != null" >
        AbnormalType = #{abnormaltype,jdbcType=BIT},
      </if>
      <if test="transferint != null" >
        TransferInt = #{transferint,jdbcType=VARCHAR},
      </if>
      <if test="cargoint != null" >
        CargoInt = #{cargoint,jdbcType=VARCHAR},
      </if>
      <if test="packageint != null" >
        PackageInt = #{packageint,jdbcType=VARCHAR},
      </if>
      <if test="hedgeabnint != null" >
        HedgeAbnInt = #{hedgeabnint,jdbcType=INTEGER},
      </if>
      <if test="abostate != null" >
        AboState = #{abostate,jdbcType=BIT},
      </if>
      <if test="handledate != null" >
        HandleDate = #{handledate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.logistics.model.SorAbnormal" >
    update sor_abnormal
    set LaunchDate = #{launchdate,jdbcType=TIMESTAMP},
      LaunchPerson = #{launchperson,jdbcType=VARCHAR},
      LaunchCompany = #{launchcompany,jdbcType=VARCHAR},
      AbnormalType = #{abnormaltype,jdbcType=BIT},
      TransferInt = #{transferint,jdbcType=VARCHAR},
      CargoInt = #{cargoint,jdbcType=VARCHAR},
      PackageInt = #{packageint,jdbcType=VARCHAR},
      HedgeAbnInt = #{hedgeabnint,jdbcType=INTEGER},
      AboState = #{abostate,jdbcType=BIT},
      HandleDate = #{handledate,jdbcType=TIMESTAMP}
    where ID = #{id,jdbcType=INTEGER}
  </update>
</mapper>