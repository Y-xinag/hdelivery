<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.logistics.dao.SorOutbounddetailsMapper" >
  <resultMap id="BaseResultMap" type="com.example.logistics.model.SorOutbounddetails" >
    <id column="ID" property="id" jdbcType="INTEGER" />
    <result column="PackageID" property="packageid" jdbcType="VARCHAR" />
    <result column="Weight" property="weight" jdbcType="DECIMAL" />
    <result column="Volume" property="volume" jdbcType="DECIMAL" />
    <result column="ScanDate" property="scandate" jdbcType="TIMESTAMP" />
    <result column="IsScan" property="isscan" jdbcType="BIT" />
    <result column="IsNextStorage" property="isnextstorage" jdbcType="BIT" />
    <result column="IsDoubleStorage" property="isdoublestorage" jdbcType="BIT" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    ID, PackageID, Weight, Volume, ScanDate, IsScan, IsNextStorage, IsDoubleStorage
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.example.logistics.model.SorOutbounddetailsExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from sor_outbounddetails
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from sor_outbounddetails
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from sor_outbounddetails
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.logistics.model.SorOutbounddetailsExample" >
    delete from sor_outbounddetails
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.logistics.model.SorOutbounddetails" >
    insert into sor_outbounddetails (ID, PackageID, Weight, 
      Volume, ScanDate, IsScan, 
      IsNextStorage, IsDoubleStorage)
    values (#{id,jdbcType=INTEGER}, #{packageid,jdbcType=VARCHAR}, #{weight,jdbcType=DECIMAL}, 
      #{volume,jdbcType=DECIMAL}, #{scandate,jdbcType=TIMESTAMP}, #{isscan,jdbcType=BIT}, 
      #{isnextstorage,jdbcType=BIT}, #{isdoublestorage,jdbcType=BIT})
  </insert>
  <insert id="insertSelective" parameterType="com.example.logistics.model.SorOutbounddetails" >
    insert into sor_outbounddetails
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        ID,
      </if>
      <if test="packageid != null" >
        PackageID,
      </if>
      <if test="weight != null" >
        Weight,
      </if>
      <if test="volume != null" >
        Volume,
      </if>
      <if test="scandate != null" >
        ScanDate,
      </if>
      <if test="isscan != null" >
        IsScan,
      </if>
      <if test="isnextstorage != null" >
        IsNextStorage,
      </if>
      <if test="isdoublestorage != null" >
        IsDoubleStorage,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="packageid != null" >
        #{packageid,jdbcType=VARCHAR},
      </if>
      <if test="weight != null" >
        #{weight,jdbcType=DECIMAL},
      </if>
      <if test="volume != null" >
        #{volume,jdbcType=DECIMAL},
      </if>
      <if test="scandate != null" >
        #{scandate,jdbcType=TIMESTAMP},
      </if>
      <if test="isscan != null" >
        #{isscan,jdbcType=BIT},
      </if>
      <if test="isnextstorage != null" >
        #{isnextstorage,jdbcType=BIT},
      </if>
      <if test="isdoublestorage != null" >
        #{isdoublestorage,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.logistics.model.SorOutbounddetailsExample" resultType="java.lang.Integer" >
    select count(*) from sor_outbounddetails
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update sor_outbounddetails
    <set >
      <if test="record.id != null" >
        ID = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.packageid != null" >
        PackageID = #{record.packageid,jdbcType=VARCHAR},
      </if>
      <if test="record.weight != null" >
        Weight = #{record.weight,jdbcType=DECIMAL},
      </if>
      <if test="record.volume != null" >
        Volume = #{record.volume,jdbcType=DECIMAL},
      </if>
      <if test="record.scandate != null" >
        ScanDate = #{record.scandate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.isscan != null" >
        IsScan = #{record.isscan,jdbcType=BIT},
      </if>
      <if test="record.isnextstorage != null" >
        IsNextStorage = #{record.isnextstorage,jdbcType=BIT},
      </if>
      <if test="record.isdoublestorage != null" >
        IsDoubleStorage = #{record.isdoublestorage,jdbcType=BIT},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update sor_outbounddetails
    set ID = #{record.id,jdbcType=INTEGER},
      PackageID = #{record.packageid,jdbcType=VARCHAR},
      Weight = #{record.weight,jdbcType=DECIMAL},
      Volume = #{record.volume,jdbcType=DECIMAL},
      ScanDate = #{record.scandate,jdbcType=TIMESTAMP},
      IsScan = #{record.isscan,jdbcType=BIT},
      IsNextStorage = #{record.isnextstorage,jdbcType=BIT},
      IsDoubleStorage = #{record.isdoublestorage,jdbcType=BIT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.logistics.model.SorOutbounddetails" >
    update sor_outbounddetails
    <set >
      <if test="packageid != null" >
        PackageID = #{packageid,jdbcType=VARCHAR},
      </if>
      <if test="weight != null" >
        Weight = #{weight,jdbcType=DECIMAL},
      </if>
      <if test="volume != null" >
        Volume = #{volume,jdbcType=DECIMAL},
      </if>
      <if test="scandate != null" >
        ScanDate = #{scandate,jdbcType=TIMESTAMP},
      </if>
      <if test="isscan != null" >
        IsScan = #{isscan,jdbcType=BIT},
      </if>
      <if test="isnextstorage != null" >
        IsNextStorage = #{isnextstorage,jdbcType=BIT},
      </if>
      <if test="isdoublestorage != null" >
        IsDoubleStorage = #{isdoublestorage,jdbcType=BIT},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.logistics.model.SorOutbounddetails" >
    update sor_outbounddetails
    set PackageID = #{packageid,jdbcType=VARCHAR},
      Weight = #{weight,jdbcType=DECIMAL},
      Volume = #{volume,jdbcType=DECIMAL},
      ScanDate = #{scandate,jdbcType=TIMESTAMP},
      IsScan = #{isscan,jdbcType=BIT},
      IsNextStorage = #{isnextstorage,jdbcType=BIT},
      IsDoubleStorage = #{isdoublestorage,jdbcType=BIT}
    where ID = #{id,jdbcType=INTEGER}
  </update>
</mapper>